Installing CUDA on Ubuntu 22.04 LTS. 

PRE-INSTALLATION REQUIREMENTS: 

Fresh install of Ubuntu 22.04.2 LTS.
  - Windows Computer if Ubuntu 22.04.2 is not installed.
  - 16 GB USB Flash Drive

HOW TO INSTALL UBUNTU 22.04.2 LTS:

Download the ISO file on the Windows PC: https://releases.ubuntu.com/jammy/ubuntu-22.04.2-desktop-amd64.iso

Download RUFUS on the Windows PC: https://github.com/pbatard/rufus/releases/download/v4.0/rufus-4.0.exe

Plug in the USB Drive into the PC and open RUFUS. 
  - Select the USB Drive to use in Rufus.
  - Select the ISO you downloaded.
  - Hit Start 

Once the USB Drive has been made, plug it into the other computer and open up the boot menu (key differs between motherboards, look it up) and boot to the USB. 
  - Proceed with normal installation, follow steps in the installer. 

INSTALLING CUDA:

Install Miniconda (Linux): https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  - Once the .sh file downloads, open the terminal.
  - cd to Downloads
  - Run the following command: sudo chmod + x Miniconda3-latest-Linux-x86_64.sh
  - Then: ./Miniconda3-latest-Linux-x86_64.sh
  - Follow instructions in the installer to complete install.

Create a test environment: conda create -n test python=3.9
Activate the new environment: conda activate test

Run the following commands:
lspci | grep -i nvidia
uname -m && cat /etc/*release

GCC: gcc --version
  - If GCC is not installed, follow the instructions to install.

Run the following: 
uname -r
sudo apt-get install linux-headers-$(uname -r)
sudo apt-key del 7fa2af80

To install CUDA Toolkit:
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.7.1/local_installers/cuda-repo-ubuntu2204-11-7-local_11.7.1-515.65.01-1_amd64.deb
sudo dpkg -i cuda-repo-ubuntu2204-11-7-local_11.7.1-515.65.01-1_amd64.deb
sudo cp /var/cuda-repo-ubuntu2204-11-7-local/cuda-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get -y install cuda

export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}
/usr/bin/nvidia-persistenced --verbose  

Installing CUDA Samples to test:

Download and extract the following zip file: https://github.com/NVIDIA/cuda-samples/archive/refs/tags/v11.6.zip

Navigate to the cuda-samples-11.6 folder, should a folder with in a folder.
  - Do "ls" and you should see the following files: "CHANGELOG....makefile....Samples"
    - If this is seen, you are in the right directory. 

Now run the following command: make
  - This is rather time consuming, so it will take a while. 

Staying in the same directory, type:
cd Samples
cd 1_Utilities
ls
cd deviceQuery
ls 
./deviceQuery

This should output the following: deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 11.7, CUDA Runtime Version = 11.7, Num Devs = 1
Result = PASS

Type the following: cd .. 
  - This should bring you back to the 1_Utilities directory. 

Type the following: 
cd bandwidthTest
./bandwidthTest

This should output the following: RESULT = PASS

Close the terminal and re-open in a new window, with the "test" Miniconda environment activated.

INSTALLING CUDNN: 

Type the following commands: 
sudo apt-get install zlib1g

Download CUDNN .deb file: https://developer.nvidia.com/compute/cudnn/secure/8.5.0/local_installers/11.7/cudnn-local-repo-ubuntu2204-8.5.0.96_1.0-1_amd64.deb

Navigate to where the file was downloaded, usually Downloads: cd Downloads

Type the following commands: 
sudo dpkg -i cudnn-local-repo-${OS}-8.5.0.96_1.0-1_amd64.deb

NOTE: The following command should work, but copy and paste the one outputted in the terminal.
  - sudo cp /var/cudnn-local-repo-*/cudnn-local-*-keyring.gpg /usr/share/keyrings/

Type the following commands: 
sudo apt-get update
sudo apt-get install libcudnn8=8.5.0.96-1+cuda11.7
sudo apt-get install libcudnn8-dev=8.5.0.96-1+cuda11.7
sudo apt-get install libcudnn8-samples=8.5.0.96-1+cuda11.7

Close and reopen terminal.

Type the following commands:

cp -r /usr/src/cudnn_samples_v8/ $HOME
cd  $HOME/cudnn_samples_v8/mnistCUDNN
make clean && make
NOTE: The above command may take some time to run.

NOTE: If the error "FreeImage.h: No such file or directory" appears, do the following:
  - sudo apt-get install libfreeimage3 libfreeimage-dev
  - Once complete, rerun the "make clean && make" command.

Type the following commmand:

./mnistCUDNN

This command should output: "Test passed!" if successful. 

Reboot system.

IF INSTALLING DEEPLABCUT: 

Navigate to the DeepLabCut Github Repository: https://github.com/DeepLabCut/DeepLabCut
    - Go under "conda-environments"
        - "DEEPLABCUT.yaml"
            - Download the raw file and save it. 

Open Anaconda Prompt as Administrator and navigate to the directory where the "DEEPLABCUT.yaml" file is saved. 
    - usually done through a series of "cd" commands. Use "ls" to list all the files in the directory to make sure you are in the correct one.

Once in the directory, type the following: conda env create -f DEEPLABCUT.yaml
    - The environment will now be created.

Activate the new environment by typing the following: activate DEEPLABCUT

Type the following commands with the new environment activated: 
    - conda install -c conda-forge cudnn
    - pip install --upgrade tensorflow==2.10.0

Installation is now complete.

Reboot System. 

Running DeepLabCut:

Open Anaconda Prompt and type: conda activate DEEPLABCUT

Now type: python -m deeplabcut 

DeepLabCut should now be running.
